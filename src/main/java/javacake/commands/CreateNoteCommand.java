package javacake.commands;

import javacake.ProgressStack;
import javacake.exceptions.DukeException;
import javacake.storage.Profile;
import javacake.storage.Storage;
import javacake.ui.Ui;

import java.io.File;
import java.io.IOException;

public class CreateNoteCommand extends Command {

    private String defaultFileName = "Notes";
    private static String userGivenFileName = "Notes";
    private static int defaultFileNameCounter = 1;
    private String defaultDirectoryPath = "data/notes/";

    /**
     * Constructor for CreateNoteCommand.
     * If inputCommand has no parameter, command will create a file based on auto-generated file name.
     * Auto-generation is done by checking if file containing the defaultFileName exists.
     * If it exists, number starting from '1' will be concatenated to the defaultFileName.
     * If inputCommand has a parameter, command will create a file based on specified file name.
     * @param inputCommand Input Command from the user to create note.
     * @throws DukeException If the input command is invalid.
     */
    public CreateNoteCommand(String inputCommand) throws DukeException {
        type = CmdType.CREATENOTE;
        String[] wordsInInputCommand = inputCommand.split("\\s+");
        if (createNoteCommandHasSpecifiedFileName(inputCommand)) {
            userGivenFileName = wordsInInputCommand[1];
        } else if (validCommandWithNoSpecifiedFileName(inputCommand)) {
            while (checkNotesFileExist(defaultDirectoryPath + userGivenFileName + ".txt")) {
                generateNewDefaultFileName();
            }
        } else {
            throw new DukeException("Invalid command: To write notes, "
                    + "type 'createnote' followed by desired (optional) filename.");
        }
    }

    /**
     * Checks if CreateNoteCommand has a specified file name.
     * @param inputCommand Input Command from the user to create note.
     * @return True if CreateNoteCommand has a specified file name.
     */
    private boolean createNoteCommandHasSpecifiedFileName(String inputCommand) {
        String[] wordsInInputCommand = inputCommand.split("\\s+");
        if (wordsInInputCommand.length == 2 && wordsInInputCommand[0].equals("createnote")) {
            return true;
        }
        return false;
    }

    /**
     * Checks if CreateNoteCommand with no parameter is valid.
     * @param inputCommand Input Command from the user to create note.
     * @return True if CreateNoteCommand with no parameter is valid.
     */
    private boolean validCommandWithNoSpecifiedFileName(String inputCommand) {
        String[] wordsInInputCommand = inputCommand.split("\\s+");
        if (wordsInInputCommand.length == 1 && wordsInInputCommand[0].equals("createnote")) {
            return true;
        }
        return false;
    }


    /**
     * Used to generate file name for user.
     * Generated by concatenating number to defaultFileName.
     */
    private void generateNewDefaultFileName() {
        userGivenFileName = defaultFileName + defaultFileNameCounter;
        defaultFileNameCounter++;
    }

    /**
     * Checks if file name already exists.
     * If file name does not exist, create note for user.
     * @param progressStack tracks current location in program
     * @param ui the Ui responsible for outputting messages
     * @param storage Storage needed to write the updated data
     * @param profile Profile of the user
     * @return Message when note is created successfully.
     * @throws DukeException If file does not exists.
     */
    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {
        try {
            StringBuilder sb = new StringBuilder();
            sb.append(userGivenFileName).append(".txt");
            String formattedFileName = sb.toString();
            sb.insert(0, defaultDirectoryPath);
            String newFilePath = sb.toString();
            //System.out.println(newFilePath);
            if (checkNotesFileExist(newFilePath)) {
                throw new DukeException("File already exists, please type 'editnote "
                        + formattedFileName + "' to edit the file instead");
            } else  {
                File file = new File(newFilePath);
                if (!file.createNewFile()) {
                    throw new DukeException("File '" + formattedFileName + "' was not created! Pls try again!");
                }
                return "File '" + formattedFileName + "'has been created successfully!\n";
            }
        } catch (IOException e) {
            throw new DukeException(e.getMessage());
        }

    }

    /**
     * Checks if file specified in file path exists.
     * @param filePath Path to the file to be created.
     * @return True if file already exists.
     */
    private boolean checkNotesFileExist(String filePath) {
        File tempFile = new File(filePath);
        return tempFile.exists();
    }
}
